// <auto-generated />
using System;
using CityHall.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CityHall.Web.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CityHall.Web.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_categories_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_categories_updated_by_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("CoordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("coordinate_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("CoordinateId")
                        .HasDatabaseName("ix_contacts_coordinate_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_contacts_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_contacts_updated_by_id");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.ContactHyperLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_contact_hyper_links");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_contact_hyper_links_contact_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_contact_hyper_links_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_contact_hyper_links_updated_by_id");

                    b.ToTable("contact_hyper_links", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_coordinates");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_coordinates_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_coordinates_updated_by_id");

                    b.ToTable("coordinates", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.FollowUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_follow_us");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_follow_us_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_follow_us_updated_by_id");

                    b.ToTable("follow_us", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Footer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("FeaturedPageId")
                        .HasColumnType("integer")
                        .HasColumnName("featured_page_id");

                    b.Property<bool>("HasNewsletter")
                        .HasColumnType("boolean")
                        .HasColumnName("has_newsletter");

                    b.Property<bool>("HasSubCategories")
                        .HasColumnType("boolean")
                        .HasColumnName("has_sub_categories");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_footers");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_footers_created_by_id");

                    b.HasIndex("FeaturedPageId")
                        .HasDatabaseName("ix_footers_featured_page_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_footers_updated_by_id");

                    b.ToTable("footers", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.HomePage.WidgetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("background");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int>("MaxItems")
                        .HasColumnType("integer")
                        .HasColumnName("max_items");

                    b.Property<int>("PreRenderedItem")
                        .HasColumnType("integer")
                        .HasColumnName("pre_rendered_item");

                    b.Property<int?>("RichPageId")
                        .HasColumnType("integer")
                        .HasColumnName("rich_page_id");

                    b.Property<bool>("ShowLoadMoreButton")
                        .HasColumnType("boolean")
                        .HasColumnName("show_load_more_button");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.Property<byte>("Widget")
                        .HasColumnType("smallint")
                        .HasColumnName("widget");

                    b.HasKey("Id")
                        .HasName("pk_widget_items");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_widget_items_created_by_id");

                    b.HasIndex("RichPageId")
                        .HasDatabaseName("ix_widget_items_rich_page_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_widget_items_updated_by_id");

                    b.ToTable("widget_items", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_offices");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_offices_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_offices_updated_by_id");

                    b.ToTable("offices", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brief_description");

                    b.Property<int?>("CoordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("coordinate_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<DateTime?>("ExpiresDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_date");

                    b.Property<string>("HtmlContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("html_content");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<int>("PageTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("page_tree_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_pages");

                    b.HasIndex("CoordinateId")
                        .HasDatabaseName("ix_pages_coordinate_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_pages_created_by_id");

                    b.HasIndex("PageTreeId")
                        .IsUnique()
                        .HasDatabaseName("ix_pages_page_tree_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_pages_updated_by_id");

                    b.ToTable("pages", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Page");
                });

            modelBuilder.Entity("CityHall.Web.Models.PageTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int>("PageId")
                        .HasColumnType("integer")
                        .HasColumnName("page_id");

                    b.Property<int?>("ParentPageTreeId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_page_tree_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_page_tree");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_page_tree_category_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_page_tree_created_by_id");

                    b.HasIndex("ParentPageTreeId")
                        .HasDatabaseName("ix_page_tree_parent_page_tree_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_page_tree_updated_by_id");

                    b.ToTable("page_tree", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.RichPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_rich_pages");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_rich_pages_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_rich_pages_updated_by_id");

                    b.ToTable("rich_pages", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.SmallCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("background_color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Subtile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subtile");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_color");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_small_cards");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_small_cards_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_small_cards_updated_by_id");

                    b.ToTable("small_cards", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("COverUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_over_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.Property<int?>("PageId")
                        .HasColumnType("integer")
                        .HasColumnName("page_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_topics");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_topics_created_by_id");

                    b.HasIndex("PageId")
                        .HasDatabaseName("ix_topics_page_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_topics_updated_by_id");

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.UsefulLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<byte>("LinkType")
                        .HasColumnType("smallint")
                        .HasColumnName("link_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_useful_links");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_useful_links_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_useful_links_updated_by_id");

                    b.ToTable("useful_links", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Users.UserOffice", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("office_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId", "OfficeId")
                        .HasName("pk_user_office");

                    b.HasIndex("OfficeId")
                        .HasDatabaseName("ix_user_office_office_id");

                    b.ToTable("user_office", (string)null);
                });

            modelBuilder.Entity("CityHall.Web.Models.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.HasIndex("LoginProvider", "ProviderKey", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_user_logins_login_provider_provider_key_tenant_id");

                    b.ToTable("AspNetUserLogins", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });

            modelBuilder.Entity("CityHall.Web.Models.PageDraft", b =>
                {
                    b.HasBaseType("CityHall.Web.Models.Page");

                    b.HasDiscriminator().HasValue("PageDraft");
                });

            modelBuilder.Entity("CityHall.Web.Models.Category", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_categories_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_categories_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Contact", b =>
                {
                    b.HasOne("CityHall.Web.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("CoordinateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contacts_coordinates_coordinate_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_contacts_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_contacts_users_updated_by_id");

                    b.Navigation("Coordinate");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.ContactHyperLink", b =>
                {
                    b.HasOne("CityHall.Web.Models.Contact", "Contact")
                        .WithMany("HyperLinks")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_hyper_links_contacts_contact_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_contact_hyper_links_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_contact_hyper_links_users_updated_by_id");

                    b.Navigation("Contact");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Coordinate", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_coordinates_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_coordinates_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.FollowUs", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_follow_us_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_follow_us_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Footer", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_footers_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Page", "FeaturedPage")
                        .WithMany()
                        .HasForeignKey("FeaturedPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_footers_pages_featured_page_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_footers_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("FeaturedPage");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.HomePage.WidgetItem", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_widget_items_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.RichPage", null)
                        .WithMany("WidgetItems")
                        .HasForeignKey("RichPageId")
                        .HasConstraintName("fk_widget_items_rich_pages_rich_page_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_widget_items_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Office", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_offices_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_offices_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Page", b =>
                {
                    b.HasOne("CityHall.Web.Models.Coordinate", "Coordinate")
                        .WithMany()
                        .HasForeignKey("CoordinateId")
                        .HasConstraintName("fk_pages_coordinates_coordinate_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_pages_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.PageTree", "PageTree")
                        .WithOne("Page")
                        .HasForeignKey("CityHall.Web.Models.Page", "PageTreeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_pages_page_tree_page_tree_id1");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_pages_users_updated_by_id");

                    b.Navigation("Coordinate");

                    b.Navigation("CreatedBy");

                    b.Navigation("PageTree");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.PageTree", b =>
                {
                    b.HasOne("CityHall.Web.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_page_tree_categories_category_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_page_tree_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.PageTree", "ParentPageTree")
                        .WithMany("ChildPageTree")
                        .HasForeignKey("ParentPageTreeId")
                        .HasConstraintName("fk_page_tree_page_tree_parent_page_tree_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_page_tree_users_updated_by_id");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentPageTree");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.RichPage", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_rich_pages_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_rich_pages_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.SmallCard", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_small_cards_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_small_cards_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Topic", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_topics_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Page", null)
                        .WithMany("Topics")
                        .HasForeignKey("PageId")
                        .HasConstraintName("fk_topics_pages_page_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_topics_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.UsefulLink", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_useful_links_users_created_by_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_useful_links_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CityHall.Web.Models.Users.UserOffice", b =>
                {
                    b.HasOne("CityHall.Web.Models.Office", "Office")
                        .WithMany("UserOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_office_offices_office_id");

                    b.HasOne("CityHall.Web.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_office_users_user_id");

                    b.Navigation("Office");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("CityHall.Web.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CityHall.Web.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("CityHall.Web.Models.Contact", b =>
                {
                    b.Navigation("HyperLinks");
                });

            modelBuilder.Entity("CityHall.Web.Models.Office", b =>
                {
                    b.Navigation("UserOffices");
                });

            modelBuilder.Entity("CityHall.Web.Models.Page", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("CityHall.Web.Models.PageTree", b =>
                {
                    b.Navigation("ChildPageTree");

                    b.Navigation("Page")
                        .IsRequired();
                });

            modelBuilder.Entity("CityHall.Web.Models.RichPage", b =>
                {
                    b.Navigation("WidgetItems");
                });
#pragma warning restore 612, 618
        }
    }
}
